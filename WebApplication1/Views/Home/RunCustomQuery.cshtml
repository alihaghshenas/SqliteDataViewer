@model string
@{
    ViewData["Title"] = "Custom Query";
}

<form asp-controller="Home" asp-action="RunCustomQuery" method="get" autocomplete="off">
    <div class="autocomplete" style="width:300px;">
    <input type="submit" class="btn-primary btn" value="اعمال"/>
    <input class="btn-primary btn" name="DatabasePath" value="@ViewBag.CurrentDataBase" hidden readonly/>
    <input id="myInput" class="input" name="query" width="100%" placeholder="SELECT * FROM ..."/>
</form>

@section scripts{
<script>
function autocomplete(inp, arr) {
  var currentFocus;
  var selectedTxt;
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      selectedTxt = val
      closeAllLists();
      if (!selectedTxt) { return false;}
      currentFocus = -1;
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      this.parentNode.appendChild(a);
      for (i = 0; i < arr.length; i++) {
        if (arr[i].substr(0, selectedTxt.length).toUpperCase() == selectedTxt.toUpperCase()) {
          b = document.createElement("DIV");
          b.innerHTML = "<strong>" + arr[i].substr(0, selectedTxt.length) + "</strong>";
          b.innerHTML += arr[i].substr(selectedTxt.length);
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          b.addEventListener("click", function(e) {
              inp.value = this.getElementsByTagName("input")[0].value;
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
  });
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        currentFocus++;
        addActive(x);
      } else if (e.keyCode == 32) { 
          selectedTxt = ""
      } else if (e.keyCode == 38) { 
        currentFocus--;
        addActive(x);
      } else if (e.keyCode == 13) {
        e.preventDefault();
        if (currentFocus > -1) {
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    if (!x) return false;
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
        x[i].parentNode.removeChild(x[i]);
      }
    }
  }
  document.addEventListener("click", function (e) {
      closeAllLists(e.target);
  });
}

var sWords = ["SELECT","SELECT *","SELECT * FROM","SELECT INTO","SELECT DISTINCT","SELECT TOP","SUM"]
var aWords = ["AND","AS","ASC","AVG","ANY","ALL","ALTER TABLE","ALTER COLUMN","ADD","ADD CONSTRAINT"]
var bWords = ["BETWEEN","BY"]
var cWords = ["CREATE","CASE","COUNT","CREATE TABLE","CHECK"]
var dWords = ["DEFAULT","DESC","DROP","DROP COLUMN","DROP TABLE"]
var eWords = ["EXISTS"]
var gWords = ["GROUP","GROUP BY"]
var fWords = ["FROM"]
var iWords = ["INSERT","INSERT INTO","IN","IS NULL","IS NOT NULL"]
var hWords = ["HAVING"]
var iWords = ["INSERT","INTO","INNER","INNER JOIN","IS NULL","IS NOT NULL"]
var lWords = ["LIKE","LIMIT"]
var mWords = ["MIN","MAX"]
var nWords = ["NOT"]
var vWords = ["VALUES"]
var uWords = ["UPDATE","UNION","UNION ALL","UNIQUE"]
var oWords = ["OR","ORDER","ORDER BY","OUTER","OUTER JOIN"]
var rWords = ["ROUNT"]
var wWords = ["WHERE"]

autocomplete(document.getElementById("myInput"), sWords);
</script>
}